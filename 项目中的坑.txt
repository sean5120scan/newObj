mint.ui使用中踩过的坑



swipe幻灯片组件

1特别注意：一定要给img设置宽度和高度。如果图片宽高不一致，会出现图片抖动和乱跳的情况。

img{width:100%}





1 lazyLoad  组件引入图片的时候无法显示

源代码：

 <ul>
	  <li v-for="item in imgData">
	    <img v-lazy="item" width="100%" class="img">
	  </li>
  </ul> 

  export default{
  name:"recommend",
  data(){
   return {
    imgData:[
               "../asset/img/01.jpeg",
               "../asset/img/02.jpeg",
               "../asset/img/03.jpeg",
               "../asset/img/04.jpeg",
               "../asset/img/05.jpeg",
               "../asset/img/06.jpeg",
            ]
     }

  }
}

原因：图片地址应该放置到根目录的static目录下。vue运行的时候会解析src目录下的图片。
      这样会把图片解析成dataURL格式，而static是静态资源库，不会被解析。所以引用静态资源里的图片不会报错。

2 图片上传前端数据发送了，为什么后台没有接收？而且报错

源代码：

 <p class="avata"><img :src="'http://localhost:8888/'+avatarImg" alt="" class="avatarImg"></p>

methods ：
  uploadImg(e){
        this.file=e.target.files[0];     
        let fd=new FileReader();
        fd.readAsDataURL(this.file);
        fd.onload=()=>{         
            this.imgSrc=fd.result;
        };
       
        this.$store.dispatch("updateimg",{       
          $http:this.$http,
          avatar:e.target.files[0]
        })
      }

actions：
 updateimg(state,payload){
        let config={'content-type':'application/x-www-form-urlencoded'}
      return payload.$http.post("http://localhost:8080/api/user/avatar/upload","avatar="+payload.avatar,config)
      
    },
原因：前后端通信是以字符串形式进行的。图片文件在传给后台的时候是一个二进制编码。所以我们需要
      通过一种手段实现后台可以接收的字符串。这里我们通过h5的FormData对象来实现

更正：

  actions：
	 updateimg(state,payload){
       let fm=new FromData();
       FromData.append("avatar",payload.avatar)
       append第一个参数表示传递给服务器的数据的名称。它是一个字符串，
             第二个参数表示传递给服务器的数据的内容。payload.avatar
	        let config={'content-type':'application/x-www-form-urlencoded'}
	      return payload.$http.post("http://localhost:8080/api/user/avatar/upload","avatar="+fm,config)  //注意这里只写fm就可以了。
	      
	  },
3  mini.ui中的组件 Action sheet 从屏幕下方划出菜单选择性别
   在页面结构中我们需要两个元素来配合形成这个。一个是点击触发的元素。一个是显示隐藏的元素
   分别要绑定两个值。点击触发的元素的值和我们最后要传给后台的性别的值双向绑定（genderVal）。显示隐藏的元素的值v-model一个控制显示隐藏的值。
   特别注意：点击的时候回出现点击无效的情况。这时我们要添加修饰符@click.native，让它以原生
   点击事件进行
页面元素
   <mt-cell title="性别"  is-link v-model="genderVal" value="" @click.native="showGender" ></mt-cell>
   <mt-actionsheet :actions="actions" v-model="sheetVisible"></mt-actionsheet>

data:function(){
return {  
    actions:[
               {name:"男",method:()=>{
               		// console.log(this.gender);
                   this.genderVal="男"

               }},
              {name:"女",method:()=>{

                   this.genderVal="女"

              }},
                {name:"保密",method:function(){
                	
                	this.genderVal="保密"
               }}
              ],
          sheetVisible:false,   //设为false，默认隐藏
          genderVal:"",
   } 
 },
methods：
      
      showGender(){
          this.sheetVisible=true;    ////设为true，点击显示      
      },

actions：

    addInfo(state,payload){
      
           let config={'content-type':'application/x-www-form-urlencoded'}
      return payload.$http.post("http://localhost:8080/api/user/profile/edit","gender="+payload.data.gender+"&birthday="+payload.data.birthday+"&shippingAddress="+payload.data.shippingAddress,config)  
    },
4: 如何引入字体图标 。以阿里字体图标库为例

   1>选择后字体后选择unicode码方式下载到本地以后，新建一个字体文件夹。把下载的icon.css,icon.eot,icon.js,icon.svg,icon.ttf,icon.woff文件拷贝到该文件夹。
   2>在要引入的组件的style下添加代码：特别注意要修改路径。
	   @font-face {
	  font-family: 'iconfont';
	  src: url('./asset/fonts/iconfont.eot');
	  src: url('./asset/fonts/iconfont.eot?#iefix') format('embedded-opentype'),
	  url('./asset/fonts/iconfont.woff') format('woff'),
	  url('./asset/fonts/iconfont.ttf') format('truetype'),
	  url('./asset/fonts/iconfont.svg#iconfont') format('svg');
	}
	.iconfont{
	  font-family:"iconfont" !important;
	  font-size:30px;font-style:normal;
	  -webkit-font-smoothing: antialiased;
	  -webkit-text-stroke-width: 0.2px;
	  -moz-osx-font-smoothing: grayscale;
	}
   3> 在组件的template中 引入标签， <i class="iconfont">&#xe606;</i>如果是以class方式下载的就在i标签中添加class

5  mint.ui 的日期组件

  该组件和actionsheet类似。都需要两个元素配合使用。一个是点击触发的元素。一个是显示隐藏的元素
   我们把他们的值双向绑定同一个值。其显示和隐藏是通过该组件内置的一个方法来实现的
  页面结构  
    <mt-cell title="出生年月"  is-link v-model="birthday" @click.native="showTime"  ></mt-cell>
    <mt-datetime-picker 
	    v-model="birthday"
	    ref="picker"
	    type="date"
	    @confirm="handleConfirm">          
   </mt-datetime-picker>
 data:function(){
  return {
         birthday:""
  }
methods:{
	
	handleConfirm(){
		this.$refs.picker.close();
	  let val=this.birthday.getFullYear()+"-"+(this.birthday.getMonth()+1)+"-"+this.birthday.getDate();
	  this.birthday=val
	}
}

特别注意 不要拷贝。否则会导致死循环。改变 年月日汉字可以改变内容
  year-format="{value} 年"
  month-format="{value} 月"
  date-format="{value} 日">

<mt-datetime-picker
  v-model="pickerVisible"
  type="date"
  year-format="{value} 年"
  month-format="{value} 月"
  date-format="{value} 日">
</mt-datetime-picker>